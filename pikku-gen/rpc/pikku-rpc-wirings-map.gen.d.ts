/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of RPCs and their return types
 */
    


// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type SayHelloInput = { name?: string; }
export type SayHelloOutput = { type: string; text: string; }[]
export type DisableToolInput = { name: string; }
export type DisableToolOutput = { type: string; text: string; }[]
export type CalculateInput = { operation: "add" | "subtract" | "multiply" | "divide"; a: number; b: number; }
export type CalculateOutput = { type: string; text: string; }[]
export type GetStaticResourceOutput = { uri: any; text: string; }[]
export type GetUserInfoInput = { userId: string; }
export type GetUserInfoOutput = { uri: string; text: string; }[]
export type StaticPromptGeneratorOutput = { role: string; content: { type: string; text: string; }; }[]
export type DynamicPromptGeneratorInput = { topic: string; complexity: "beginner" | "intermediate" | "advanced"; includeExamples?: string; }
export type DynamicPromptGeneratorOutput = { role: "user"; content: { type: "text"; text: string; }; }[]

interface RPCHandler<I, O> {
    input: I;
    output: O;
}

export type RPCMap = {
};


export type RPCInvoke = <Name extends keyof RPCMap>(
  name: Name,
  data: RPCMap[Name]['input'],
  options?: {
    location?: 'local' | 'remote' | 'auto'
  }
) => Promise<RPCMap[Name]['output']>

export type TypedPikkuRPC = {
  depth: number;
  global: boolean;
  invoke: RPCInvoke;
  invokeExposed: (name: string, data: any) => Promise<any> 
}
  