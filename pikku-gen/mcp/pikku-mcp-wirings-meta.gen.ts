/**
 * This file was generated by the @pikku/cli
 */
import { pikkuState } from '@pikku/core'
pikkuState('mcp', 'resourcesMeta', {
  "getStaticResource": {
    "pikkuFuncName": "getStaticResource",
    "uri": "getStaticResource",
    "title": "Static Resource",
    "description": "Gets a static resource with predefined data",
    "inputSchema": null,
    "outputSchema": "GetStaticResourceOutput"
  },
  "getUserInfo/{userId}": {
    "pikkuFuncName": "getUserInfo",
    "uri": "getUserInfo/{userId}",
    "title": "User Information",
    "description": "Retrieve user information by user ID",
    "tags": [
      "user",
      "profile",
      "data"
    ],
    "inputSchema": "GetUserInfoInput",
    "outputSchema": "GetUserInfoOutput"
  }
})
pikkuState('mcp', 'toolsMeta', {
  "sayHello": {
    "pikkuFuncName": "sayHello",
    "name": "sayHello",
    "description": "Greet someone with a friendly hello message",
    "tags": [
      "greeting",
      "hello",
      "demo"
    ],
    "inputSchema": "SayHelloInput",
    "outputSchema": "SayHelloOutput"
  },
  "disableTool": {
    "pikkuFuncName": "disableTool",
    "name": "disableTool",
    "description": "Disable a tool by name",
    "inputSchema": "DisableToolInput",
    "outputSchema": "DisableToolOutput"
  },
  "calculate": {
    "pikkuFuncName": "calculate",
    "name": "calculate",
    "description": "Perform basic mathematical operations (add, subtract, multiply, divide)",
    "tags": [
      "math",
      "calculator",
      "arithmetic"
    ],
    "inputSchema": "CalculateInput",
    "outputSchema": "CalculateOutput"
  }
})
pikkuState('mcp', 'promptsMeta', {
  "getStaticResource": {
    "pikkuFuncName": "staticPromptGenerator",
    "name": "getStaticResource",
    "description": "A static prompt that returns a predefined message",
    "inputSchema": null,
    "outputSchema": "StaticPromptGeneratorOutput",
    "arguments": []
  },
  "dynamicPromptGenerator": {
    "pikkuFuncName": "dynamicPromptGenerator",
    "name": "dynamicPromptGenerator",
    "description": "Generate educational content with progressive complexity and optional examples",
    "tags": [
      "education",
      "content",
      "progressive",
      "examples"
    ],
    "inputSchema": "DynamicPromptGeneratorInput",
    "outputSchema": "DynamicPromptGeneratorOutput",
    "arguments": [
      {
        "name": "topic",
        "description": "topic parameter",
        "required": true
      },
      {
        "name": "complexity",
        "description": "complexity parameter",
        "required": true
      },
      {
        "name": "includeExamples",
        "description": "includeExamples parameter",
        "required": false
      }
    ]
  }
})